create table public.waitlist_entries (
  id uuid not null default gen_random_uuid (),
  email text not null,
  name text null,
  referral_code text not null default "substring" ((gen_random_uuid ())::text, 1, 8),
  referred_by_code text null,
  twitter_followed boolean null default false,
  discord_joined boolean null default false,
  email_connected boolean null default false,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  wallet_address text null,
  twitter_username text null,
  discord_username text null,
  numeric_id bigserial not null,
  constraint waitlist_entries_pkey primary key (id),
  constraint waitlist_entries_email_key unique (email),
  constraint waitlist_entries_referral_code_key unique (referral_code),
  constraint chk_wallet_address_format check (
    (
      (wallet_address is null)
      or (wallet_address ~ '^0x[a-fA-F0-9]{40}$'::text)
    )
  )
) TABLESPACE pg_default;

create unique INDEX IF not exists idx_waitlist_entries_wallet_address on public.waitlist_entries using btree (wallet_address) TABLESPACE pg_default
where
  (wallet_address is not null);

create trigger tr_normalize_wallet_address BEFORE INSERT
or
update on waitlist_entries for EACH row
execute FUNCTION normalize_wallet_address ();